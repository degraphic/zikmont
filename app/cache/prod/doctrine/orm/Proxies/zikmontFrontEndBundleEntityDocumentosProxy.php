<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class zikmontFrontEndBundleEntityDocumentosProxy extends \zikmont\FrontEndBundle\Entity\Documentos implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getCodigoDocumentoPk()
    {
        $this->__load();
        return parent::getCodigoDocumentoPk();
    }

    public function setNombreDocumento($nombreDocumento)
    {
        $this->__load();
        return parent::setNombreDocumento($nombreDocumento);
    }

    public function getNombreDocumento()
    {
        $this->__load();
        return parent::getNombreDocumento();
    }

    public function setCodigoDocumentoTipoFk($codigoDocumentoTipoFk)
    {
        $this->__load();
        return parent::setCodigoDocumentoTipoFk($codigoDocumentoTipoFk);
    }

    public function getCodigoDocumentoTipoFk()
    {
        $this->__load();
        return parent::getCodigoDocumentoTipoFk();
    }

    public function setColumnaLote($columnaLote)
    {
        $this->__load();
        return parent::setColumnaLote($columnaLote);
    }

    public function getColumnaLote()
    {
        $this->__load();
        return parent::getColumnaLote();
    }

    public function setColumnaBodega($columnaBodega)
    {
        $this->__load();
        return parent::setColumnaBodega($columnaBodega);
    }

    public function getColumnaBodega()
    {
        $this->__load();
        return parent::getColumnaBodega();
    }

    public function setDocumentoTipo(\zikmont\FrontEndBundle\Entity\DocumentosTipo $documentoTipo)
    {
        $this->__load();
        return parent::setDocumentoTipo($documentoTipo);
    }

    public function getDocumentoTipo()
    {
        $this->__load();
        return parent::getDocumentoTipo();
    }

    public function addMovimientos(\zikmont\FrontEndBundle\Entity\Movimientos $movimientos)
    {
        $this->__load();
        return parent::addMovimientos($movimientos);
    }

    public function getMovimientos()
    {
        $this->__load();
        return parent::getMovimientos();
    }

    public function setOperacionInventario($operacionInventario)
    {
        $this->__load();
        return parent::setOperacionInventario($operacionInventario);
    }

    public function getOperacionInventario()
    {
        $this->__load();
        return parent::getOperacionInventario();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'codigoDocumentoPk', 'nombreDocumento', 'codigoDocumentoTipoFk', 'columnaLote', 'columnaBodega', 'operacionInventario', 'DocumentoTipo');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}