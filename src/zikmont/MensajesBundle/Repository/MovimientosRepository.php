<?php

namespace zikmont\FrontEndBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimientosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimientosRepository extends EntityRepository {

    /**
     * Cambia el estado de un movimiento a autorizado
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @param objeto $em la interface para manejar las entidades
     * */
    public function Autorizar($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $boolValidacion = true;
            $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
            $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);

            $arDocumento = new \zikmont\InventarioBundle\Entity\InvDocumentos();
            $arDocumento = $em->getRepository('zikmontInventarioBundle:InvDocumentos')->find($arMovimiento->getCodigoDocumentoFk());

            //Solo se pueden autorizar los movimientos que no esten autorizados
            if ($arMovimiento->getEstadoAutorizado() == 0) {
                $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                //Validar datos entradas
                if ($arDocumento->getOperacionInventario() != 0) {
                    $intPosicion = 0;
                    while ($boolValidacion && $intPosicion < count($arMovimientosDetalle)) {
                        if (!is_numeric($arMovimientosDetalle[$intPosicion]->getCantidad())) {
                            $boolValidacion = false;
                        }

                        if ($arMovimientosDetalle[$intPosicion]->getLoteFk() == "") {
                            $boolValidacion = false;
                        }

                        if ($arMovimientosDetalle[$intPosicion]->getCodigoBodegaFk() == "") {
                            $boolValidacion = false;
                        }

                        $intPosicion++;
                    }

                    if ($arDocumento->getOperacionInventario() == -1 && $boolValidacion == true) {
                        //Validar si existen las cantidades de salida agrupadas por item, lote, bodega
                        $intPosicion = 0;
                        $arMovDetLoteItem = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->DevMovDetItemLote($codigoMovimiento);
                        while ($boolValidacion && $intPosicion < count($arMovDetLoteItem)) {
                            $boolValidacion = $em->getRepository('zikmontInventarioBundle:InvLotes')->ValidarExistencia($arMovimientosDetalle[$intPosicion]->getCodigoItemFk(), $arMovimientosDetalle[$intPosicion]->getCodigoBodegaFk(), $arMovimientosDetalle[$intPosicion]->getLoteFk(), $arMovimientosDetalle[$intPosicion]->getCantidad());
                            $intPosicion++;
                        }
                    }
                }

                //Ejecutar inventario
                if ($boolValidacion == true) {
                    foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                        $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                        $arMovimientoDetalleAct->setEstadoAutorizado(1);
                        $arMovimientoDetalleAct->setCantidadOperada($arMovimientoDetalle->getCantidad() * $arDocumento->getOperacionInventario());
                        $arMovimientoDetalleAct->setOperacionInventario($arDocumento->getOperacionInventario());
                        $em->persist($arMovimientoDetalleAct);
                        $em->flush();
                        if ($arDocumento->getOperacionInventario() != 0) {
                            $em->getRepository('zikmontInventarioBundle:InvLotes')->MoverInventario($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arDocumento->getOperacionInventario(), $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());
                        }
                    }
                    $arMovimiento->setEstadoAutorizado(1);
                    $em->persist($arMovimiento);
                    $em->flush();
                    $em->getRepository('zikmontInventarioBundle:InvMovimientos')->Liquidar($codigoMovimiento);
                    return true;
                }
                else
                    return false;
            }
            else
                return false;
        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Cambia el estado de un movimiento a sin autorizar
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @param objeto $em la interface para manejar las entidades
     * */
    public function DesAutorizar($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $boolValidacion = true;
            $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
            $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);

            //Solo se pueden autorizar los movimientos que no esten autorizados
            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0) {

                if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0) {
                    //Agrupar los detalles por item, lote y bodega para verificar las existencias
                    if ($arMovimiento->getDocumentoRel()->getOperacionInventario() * -1 == -1) {
                        $arMovDetLoteItem = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->DevMovDetItemLote($codigoMovimiento);
                        $intPosicion = 0;
                        while ($boolValidacion && $intPosicion < count($arMovDetLoteItem)) {
                            //Validar si existen las cantidades de salida                    
                            $boolValidacion = $em->getRepository('zikmontInventarioBundle:InvLotes')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']);
                            $intPosicion++;
                        }
                    }
                }

                //Ejecutar inventario
                if ($boolValidacion == true) {
                    $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                    $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                    $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                    foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                        $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                        $arMovimientoDetalleAct->setEstadoAutorizado(0);
                        $em->persist($arMovimientoDetalleAct);
                        $em->flush();

                        if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0)
                            $em->getRepository('zikmontInventarioBundle:InvLotes')->MoverInventario($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arMovimientoDetalle->getOperacionInventario() * -1, $arMovimientoDetalle->getCantidad());
                    }
                    $arMovimiento->setEstadoAutorizado(0);
                    $em->persist($arMovimiento);
                    $em->flush();
                }
            }
            return true;
        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Imprime un movimiento
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @return boolean si se imprime o no el movimiento
     * */
    public function Imprimir($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);

        if ($arMovimiento->getEstadoAutorizado() == 1) {
            $arMovimiento->setEstadoImpreso(1);
            $em->persist($arMovimiento);
            $em->flush();

            if ($arMovimiento->getDocumentoRel()->getGeneraCartera() == 1)
                $em->getRepository('zikmontFrontEndBundle:CuentasCobrar')->Aplicar($codigoMovimiento);
            if ($arMovimiento->getDocumentoRel()->getGeneraTesoreria() == 1)
                $em->getRepository('zikmontFrontEndBundle:CuentasPagar')->Aplicar($codigoMovimiento);

            return true;
        }
        else
            return false;
    }

    public function DevMovimientosDocumentosControl($intCodigoDocumento, $em) {
        $em = $this->getEntityManager();
        $strSql = "SELECT movimientos.codigo_movimiento_pk AS codigoMovimientoPk, 
                          movimientos.numero_movimiento AS numeroMovimiento,
                          movimientos.fecha,
                          terceros.nombre_corto_tercero AS nombreCortoTercero,
                          documentos.nombre_documento AS nombreDocumento,
                          movimientos.subtotal,
                          documentos_control.codigo_documento_hijo_pk
                   FROM movimientos 
                   RIGHT JOIN documentos_control ON movimientos.codigo_documento_fk = documentos_control.codigo_documento_hijo_pk
                   LEFT JOIN terceros ON movimientos.codigo_tercero_fk = terceros.codigo_tercero_pk
                   LEFT JOIN documentos ON documentos_control.codigo_documento_hijo_pk = documentos.codigo_documento_pk
                   WHERE documentos_control.codigo_documento_padre_pk = " . $intCodigoDocumento;

        $objCon = $em->getConnection();
        $arMovimientos = $objCon->executeQuery($strSql);
        $arMovimientos = $arMovimientos->fetchAll();
        return $arMovimientos;
    }

    /**
     * Liquida los todales del movimiento y los detalles
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function Liquidar($codigoMovimiento) {
        $em = $this->getEntityManager();
        //Encabezados
        $douGranSubTotal = 0;
        $douGranTotalIva = 0;
        $douGranTotalDescuento = 0;
        $douGranTotal = 0;
        $douGranTotalRetencionFuente = 0;
        $douGranTotalRetencionIvaVentas = 0;
        $douGranTotalOtrasRetenciones = 0;


        $arConfiguraciones = new \zikmont\FrontEndBundle\Entity\GenConfiguraciones();
        $arConfiguraciones = $em->getRepository('zikmontFrontEndBundle:GenConfiguraciones')->find(1);
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);
        $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
        $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
            //Detalles
            $douSubTotal = 0;
            $douTotalIva = 0;
            $douTotalDescuento = 0;
            $douTotal = 0;
            $douSubTotal = $arMovimientoDetalle->getCantidad() * $arMovimientoDetalle->getPrecio();
            $douTotalIva = $douSubTotal * ($arMovimientoDetalle->getPorcentajeIva() / 100);
            if ($arMovimientoDetalle->getPorcentajeDescuento() > 0)
                $douTotalDescuento = $douSubTotal * ($arMovimientoDetalle->getPorcentajeDescuento() / 100);
            $douTotal = $douSubTotal + $douTotalIva - $douTotalDescuento;

            $douGranSubTotal = $douGranSubTotal + $douSubTotal;
            $douGranTotalIva = $douGranTotalIva + $douTotalIva;
            $douGranTotalDescuento = $douGranTotalDescuento + $douTotalDescuento;
            $douGranTotal = $douGranTotal + $douTotal;

            $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
            $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
            $arMovimientoDetalleAct->setSubTotal($douSubTotal);
            $arMovimientoDetalleAct->setValorTotalIva($douTotalIva);
            $arMovimientoDetalleAct->setTotal($douTotal);
            $em->persist($arMovimientoDetalleAct);
            $em->flush();
        }

        //Calcular la retencion en compras
        if ($arMovimiento->getDocumentoRel()->getCodigoComprobanteFk() == 4) {
            if ($arMovimiento->getTerceroRel()->getAutoretenedor() == 0) {
                if ($douGranSubTotal >= $arConfiguraciones->getBaseRetencionFuente()) {
                    $douGranTotalRetencionFuente = ($douGranSubTotal * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
                }
            }
        }
        
        //Calcular la retencion en la fuente Ventas
        if ($arMovimiento->getDocumentoRel()->getCodigoComprobanteFk() == 3) {
            if ($arMovimiento->getTerceroRel()->getRetencionFuenteVentas() == 1) {
                if ($douGranSubTotal >= $arConfiguraciones->getBaseRetencionFuente() || $arMovimiento->getTerceroRel()->getRetencionFuenteVentasSinBase() == 1) {
                    $douGranTotalRetencionFuente = ($douGranSubTotal * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
                }
            }
            
            //Liquidar retencion de iva para las ventas, solo los grandes contribuyentes y entidades del estado nos retienen 50% iva
            if ($arMovimiento->getTerceroRel()->getClasificacionTributariaRel()->getRetencionIvaVentas() == 1) {
                //Validacion acordada con Luz Dary de que las devoluciones tambien validen la base
                if ($douGranTotalIva >= $arConfiguraciones->getBaseRetencionIvaVentas()) {
                    $douGranTotalRetencionIvaVentas = ($douGranTotalIva * $arConfiguraciones->getPorcentajeRetencionIvaVentas()) / 100;
                }
            }            
        }        

        $douGranTotalOtrasRetenciones = $arMovimiento->getValorOtrasRetenciones();

        $douGranTotal = $douGranTotal - ($douGranTotalRetencionFuente + $douGranTotalOtrasRetenciones + $douGranTotalDescuento);

        //Calcular la retencion en la fuente de ventas para clientes que retengan
        //Si el cliente es retenedor y el documento es una venta (Factura o devolucion)
        if ($arMovimiento->getTerceroRel()->getRetencionFuenteVentas() == 1 && $arMovimiento->getDocumentoRel()->getCodigoComprobanteFk() == 3) {
            if ($douGranSubTotal >= $arConfiguraciones->getBaseRetencionFuente()) {
                $douGranTotalRetencionFuente = ($douGranSubTotal * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
            }
        }

        $arMovimientoAct = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimientoAct = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);
        $arMovimientoAct->setSubTotal($douGranSubTotal);
        $arMovimientoAct->setValorTotalIva($douGranTotalIva);
        $arMovimientoAct->setValorTotalDescuento($douGranTotalDescuento);
        $arMovimientoAct->setTotal($douGranTotal);
        $arMovimientoAct->setValorRetencionFuente($douGranTotalRetencionFuente);
        $arMovimientoAct->setValorRetencionIvaVentas($douGranTotalRetencionIvaVentas);
        $em->persist($arMovimientoAct);
        $em->flush();
    }

    /**
     * Devuelve los movimientos de un filtro
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevMovimientosFiltro($codigoDocumento, $codigoMovimiento, $numeroMovimiento, $codigoTercero, $ChkFecha, $strFechaDesde, $strFechaHasta) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('m')
                ->from('zikmontFrontEndBundle:Movimientos', 'm')
                ->where('m.codigoDocumentoFk = :codigoDocumento')
                ->setParameter('codigoDocumento', $codigoDocumento);

        if ($codigoMovimiento != Null && $codigoMovimiento != "")
            $query->andWhere('m.codigoMovimientoPk = ' . $codigoMovimiento);

        if ($numeroMovimiento != Null && $numeroMovimiento != "")
            $query->andWhere('m.numeroMovimiento = ' . $numeroMovimiento);

        if ($codigoTercero != Null && $codigoTercero != "")
            $query->andWhere('m.codigoTercero = ' . $codigoTercero);

        if ($ChkFecha != Null) {
            if ($strFechaDesde != "" && $strFechaDesde != NULL) {
                if ($strFechaHasta != "" && $strFechaHasta != NULL) {
                    $query->andWhere("m.fecha >= '" . $strFechaDesde . " 00:00:00' AND m.fecha <= '" . $strFechaHasta . " 23:59:59'");
                }
            }
        }

        $objQuery = $query->getQuery();
        $arMovimientos = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
        $arMovimientos = $objQuery->getResult();

        return $arMovimientos;
    }

    /**
     * Devuelve los movimientos facturacion resumido por año y mes     
     * */
    public function DevMovimientosFacturacionResumidoAnnioMes() {
        $em = $this->getEntityManager();
        $strSql = "SELECT DATE_FORMAT(fecha, '%Y') AS FechaAnnio, DATE_FORMAT(fecha, '%M') AS FechaMes, SUM(subtotal) as subTotal 
                   FROM movimientos
                   GROUP BY DATE_FORMAT(fecha, '%Y'), DATE_FORMAT(fecha, '%M')";

        $objCon = $em->getConnection();
        $arMovimientos = $objCon->executeQuery($strSql);
        $arMovimientos = $arMovimientos->fetchAll();
        return $arMovimientos;
    }

    /**
     * Devuelve el estado autorizado de un movimiento
     * @param integer $codigoMovimientoPk El codigo del movimiento a consultar
     * @return boolean 1 / 0 => autorizado / no autorizado 
     */
    public function DevEstadoMovimiento($codigoMovimientoPk) {
        $em = $this->getEntityManager();
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimientoPk);

        return (int) $arMovimiento->getEstadoAutorizado();
    }

}