<?php

namespace zikmont\FrontEndBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimientosDetallesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimientosDetallesRepository extends EntityRepository {

    public function DevMovimientosDetallesInventario($dateFechaDesde = "", $dateFechaHasta = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoItemFk, md.codigoBodegaFk, md.loteFk, SUM(md.cantidadOperada) as cantidadOperada')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin("md.movimientoRel", "m")
                ->where('md.operacionInventario != 0 AND md.estadoAutorizado = 1')
                ->groupBy('md.codigoItemFk, md.codigoBodegaFk, md.loteFk');                    
        $objQuery = $query->getQuery();        
        return $objQuery->getResult();
    }
    
    public function DevMovimientosDetallesOperacion($dateFechaDesde = "", $dateFechaHasta = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoItemFk, md.codigoBodegaFk, md.loteFk, md.cantidadOperada')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin("md.movimientoRel", "m")
                ->where('md.operacionInventario != 0 AND md.estadoAutorizado = 1')
                ->orderBy("m.fecha", 'ASC');
        
        if ($dateFechaDesde != Null && $dateFechaDesde != "" && $dateFechaHasta != Null && $dateFechaHasta != "")
            $query->andWhere("(m.fecha >= '" . $dateFechaDesde . " 00:00:00' AND m.fecha <= '" . $dateFechaHasta . " 23:59:00')");
        $objQuery = $query->getQuery();        
        return $objQuery->getResult();
    }
    public function DevMovimientosDetalles($codigoItem = null) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->where('md.operacionInventario != :operacion')
                ->setParameter('operacion', 0);

        if ($codigoItem != Null && $codigoItem != "")
            $query->andWhere('md.codigoItemFk = ' . $codigoItem);

        $arMovimientosDetalles = $query->getQuery();

        return $arMovimientosDetalles->getResult();
    }

    public function DevMovDetItemLote($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoItemFk, md.codigoBodegaFk, md.loteFk, SUM(md.cantidad) as cantidad')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('md.codigoItemFk, md.codigoBodegaFk, md.loteFk')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }

    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaCompras($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal) as subTotal, item.cuentaCompras')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }

    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaDevolucionCompras($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal) as subTotal, item.cuentaDevolucionCompras')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaDevolucionCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaVentas($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal) as subTotal, item.cuentaIngreso')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaDevolucionVentas($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal) as subTotal, item.cuentaDevolucionVentas')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaDevolucionCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }     
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaCostoVentas($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.costo * md.cantidad) as costo, item.cuentaCosto')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaCosto')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaInventario($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.costo * md.cantidad) as costo, item.cuentaInventario')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de iva
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @return double $subTotalBaseIva subtotal de los registros con iva
     * */
    public function DevBaseIva($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal) as subTotal')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk AND md.porcentajeIva > 0')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();
        $arMovimientosDetalles = $query->getResult();
        return (double) $arMovimientosDetalles[0]['subTotal'];
    }

    public function DevPedidosPendientes($codigoProducto) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.cantidad, movimientos.fecha, movimientos.numeroMovimiento')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.movimientoRel', 'movimientos')
                ->leftJoin('movimientos.terceroRel', 'terceros')
                ->where('md.codigoItemFk = :codigoItemFk AND md.estadoAutorizado = 1 AND movimientos.codigoDocumentoFk = 4')
                ->setParameter('codigoItemFk', $codigoProducto)
                ->getQuery();

        $arPedidosPendientes = $query->getResult();
        return $arPedidosPendientes;
    }
    
    public function DevOrdenesPendientes($codigoProducto) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.cantidad')
                ->from('zikmontFrontEndBundle:MovimientosDetalles', 'md')
                ->leftJoin('md.movimientoRel', 'movimientos')
                ->where('md.codigoItemFk = :codigoItemFk AND md.estadoAutorizado = 1 AND movimientos.codigoDocumentoFk = 4')
                ->setParameter('codigoItemFk', $codigoProducto)
                ->getQuery();

        $arPedidosPendientes = $query->getResult();
        return $arPedidosPendientes;
    }
}