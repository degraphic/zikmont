<?php

namespace zikmont\CarteraBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CuentasCobrarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarCuentasCobrarRepository extends EntityRepository
{
    /**
     * Aplicar cartera: Este metodo efectua el movimiento de cartera respectivo para un movimiento
     * @param integer $codigoMovimiento Codigo del movimiento
     * */
    public function Aplicar($codigoMovimiento) { 
        $em = $this->getEntityManager();
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();        
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);
        $arCuentaCobrar = new \zikmont\FrontEndBundle\Entity\CuentasCobrar();
        $arCuentaCobrar->setFecha($arMovimiento->getFecha());
        $arCuentaCobrar->setMovimientoRel($arMovimiento);
        $arCuentaCobrar->setTerceroRel($arMovimiento->getTerceroRel());
        $arCuentaCobrar->setValorOriginal($arMovimiento->getTotal());
        
        /*
         * Esto determina donde afecta la cuenta por cobrar si en el 
         * debito (Codigo 1) o en credito (Codigo 2)
         * Las facturas van al debito
         * Las NC van al credito
         */      
        
        if($arMovimiento->getDocumentoRel()->getTipoAsientoCartera() == 1) {
            $arCuentaCobrar->setDebitos ($arMovimiento->getTotal());
            $arCuentaCobrar->setSaldo ($arMovimiento->getTotal());
        }
            
        
        if($arMovimiento->getDocumentoRel()->getTipoAsientoCartera() == 2)
            $arCuentaCobrar->setCreditos($arMovimiento->getTotal());        
            
        $em->persist($arCuentaCobrar);
        $em->flush();                                  
    }     
    
    public function DevCuentasCobrar ($intCodigoTercero) {
        $em = $this->getEntityManager();         
        $query = $em->createQueryBuilder()            
            ->select('(cc.saldo - cc.creditos) as saldo, cc.valorOriginal, cc.codigoMovimientoFk, cc.fecha, (CURRENT_DATE() - cc.fecha) as nroDias, m.numeroMovimiento, doc.abreviatura, ter.nombreCortoTercero ')                
            ->from('zikmontFrontEndBundle:CuentasCobrar', 'cc')
            ->leftJoin('cc.movimientoRel', 'm')
            ->leftJoin('m.documentoRel', 'doc')
            ->leftJoin('cc.terceroRel', 'ter')        
            ->where("cc.codigoTerceroFk = $intCodigoTercero")
            ->getQuery();
        return $query->getResult();        
    }       
}