<?php

namespace zikmont\InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimientosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvMovimientosRepository extends EntityRepository {

    /**
     * Cambia el estado de un movimiento a autorizado
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @param objeto $em la interface para manejar las entidades
     * */
    public function Autorizar($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $strValidacion = "";
            $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
            $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);

            $arDocumento = new \zikmont\InventarioBundle\Entity\InvDocumentos();
            $arDocumento = $em->getRepository('zikmontInventarioBundle:InvDocumentos')->find($arMovimiento->getCodigoDocumentoFk());

            //Solo se pueden autorizar los movimientos que no esten autorizados
            if ($arMovimiento->getEstadoAutorizado() == 0) {
                $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                if(count($arMovimientosDetalle) > 0) {
                    //Validar datos entradas
                    if ($arDocumento->getOperacionInventario() != 0) {
                        $intPosicion = 0;
                        while ($strValidacion == "" && $intPosicion < count($arMovimientosDetalle)) {
                            if (!is_numeric($arMovimientosDetalle[$intPosicion]->getCantidad())) 
                                $strValidacion = "No ha especificado una candidad, ";                        
                            if ($arMovimientosDetalle[$intPosicion]->getLoteFk() == "") 
                                $strValidacion .= "No ha especificado un lote, ";
                            if ($arMovimientosDetalle[$intPosicion]->getCodigoBodegaFk() == "") 
                                $strValidacion .= "No ha especificado una a bodega.";                        
                            if($strValidacion != "") 
                                $strValidacion = "Error en el detalle " . $arMovimientosDetalle[$intPosicion]->getCodigoDetalleMovimientoPk() . " " . $arMovimientosDetalle[$intPosicion]->getCodigoItemFk() . "-" . $arMovimientosDetalle[$intPosicion]->getItemRel()->getDescripcion() . " Error: " . $strValidacion;                            
                            $intPosicion++;
                        }                        
                        //Validar si existen las cantidades de salida agrupadas por item, lote, bodega
                        if ($arDocumento->getOperacionInventario() == -1 && $strValidacion == "") {                            
                            $intPosicion = 0;
                            $arMovDetLoteItem = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->DevMovDetItemLote($codigoMovimiento);
                            while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {                                
                                //No aplica para items de servicio
                                if($arMovDetLoteItem[$intPosicion]['itemServicio'] == 0) {
                                    if(!$em->getRepository('zikmontInventarioBundle:InvLotes')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))                                         
                                        $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];                                    
                                }                                
                                $intPosicion++;
                            }
                        }
                    }                    
                    //Ejecutar inventario
                    if ($strValidacion == "") {
                        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                            $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                            $arMovimientoDetalleAct->setEstadoAutorizado(1);
                            $intOperacionInventario = $em->getRepository('zikmontInventarioBundle:InvItem')->DevOperacionInventario($arMovimiento->getDocumentoRel()->getOperacionInventario(), $arMovimientoDetalle->getItemRel()->getItemServicio());
                            $arMovimientoDetalleAct->setCantidadOperada($arMovimientoDetalle->getCantidad() * $intOperacionInventario);                            
                            $arMovimientoDetalleAct->setOperacionInventario($intOperacionInventario);                                                        
                            //Si es un documento generador de costo
                            if($arMovimiento->getDocumentoRel()->getGeneraCostoPromedio() == 1) {
                                $arMovimientoDetalleAct->setCosto($arMovimientoDetalleAct->getPrecio());
                                //Calcular costo promedio y asignarlo al item
                            }                                                            
                            else
                                $arMovimientoDetalleAct->setCosto($arMovimientoDetalleAct->getItemRel()->getCostoPromedio());
                            $em->persist($arMovimientoDetalleAct);
                            $em->flush();
                            if ($intOperacionInventario != 0) {
                                $em->getRepository('zikmontInventarioBundle:InvLotes')->MoverInventario($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arDocumento->getOperacionInventario(), $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());
                            }
                        }
                        $arMovimiento->setEstadoAutorizado(1);
                        
                        if($arDocumento->getOperacionInventario() == -1) 
                            $arMovimiento->setFecha(date_create(date('Y-m-d H:i:s')));
                        
                        if($arMovimiento->getNumeroMovimiento() == 0) {
                            if($arDocumento->getAsignarConsecutivoImpresion() == 0)
                                $arMovimiento->setNumeroMovimiento ($em->getRepository('zikmontInventarioBundle:InvMovimientos')->DevConsecutivo($arDocumento->getCodigoDocumentoPk()));
                        }
                            
                        $em->persist($arMovimiento);
                        $em->flush();
                        $em->getRepository('zikmontInventarioBundle:InvMovimientos')->Liquidar($codigoMovimiento);
                        return "";
                    }
                    else
                        return $strValidacion;                    
                }
                else
                    return "El movimiento no tiene detalles";
            }
            else
                return "El documento ya esta autorizado";
        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Cambia el estado de un movimiento a sin autorizar
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @param objeto $em la interface para manejar las entidades
     * */
    public function DesAutorizar($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $strValidacion = "";
            $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
            $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);

            //Solo se pueden autorizar los movimientos que no esten autorizados
            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0) {
                if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0) {
                    //Agrupar los detalles por item, lote y bodega para verificar las existencias
                    if ($arMovimiento->getDocumentoRel()->getOperacionInventario() * -1 == -1) {
                        $arMovDetLoteItem = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->DevMovDetItemLote($codigoMovimiento);
                        $intPosicion = 0;
                        while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {
                            //Validar si existen las cantidades de salida  
                            if(!$em->getRepository('zikmontInventarioBundle:InvLotes')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))
                                $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];
                            $intPosicion++;
                        }
                    }
                }

                //Ejecutar inventario
                if ($strValidacion == "") {
                    $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                    $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                    $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                    foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                        $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                        $arMovimientoDetalleAct->setEstadoAutorizado(0);
                        $em->persist($arMovimientoDetalleAct);
                        $em->flush();

                        if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0)
                            $em->getRepository('zikmontInventarioBundle:InvLotes')->MoverInventario($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arMovimientoDetalle->getOperacionInventario() * -1, $arMovimientoDetalle->getCantidad());
                    }
                    $arMovimiento->setEstadoAutorizado(0);
                    $em->persist($arMovimiento);
                    $em->flush();
                    return "";
                }
                else
                    return $strValidacion;
            }
            else
                return "No se puede desautorizar el movimiento, verifique que no este anulado o impreso";
            
        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Cambia el estado de un movimiento a anulado
     * */
    public function Anular($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $strValidacion = "";
            $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
            $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);

            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0 && $arMovimiento->getEstadoImpreso() == 1) {
                if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0) {
                    //Agrupar los detalles por item, lote y bodega para verificar las existencias
                    if ($arMovimiento->getDocumentoRel()->getOperacionInventario() * -1 == -1) {
                        $arMovDetLoteItem = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->DevMovDetItemLote($codigoMovimiento);
                        $intPosicion = 0;
                        while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {
                            //Validar si existen las cantidades de salida  
                            if(!$em->getRepository('zikmontInventarioBundle:InvLotes')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))
                                $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];
                            $intPosicion++;
                        }
                    }
                }

                //Ejecutar inventario
                if ($strValidacion == "") {
                    $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                    $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
                    $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                    foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                    if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0)
                        //Se debe ejecutar primero el inventario antes de actualizar
                        $em->getRepository('zikmontInventarioBundle:InvLotes')->MoverInventario($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arMovimientoDetalle->getOperacionInventario() * -1, $arMovimientoDetalle->getCantidad());                        
                        $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());

                        $arMovimientoDetalleAct->setEstadoAnulado(1);
                        $arMovimientoDetalleAct->setCantidad(0);
                        $arMovimientoDetalleAct->setPrecio(0);
                        $arMovimientoDetalleAct->setPorcentajeDescuento(0);
                        $arMovimientoDetalleAct->setCantidadOperada(0);
                        $arMovimientoDetalleAct->setSubTotal(0);
                        $arMovimientoDetalleAct->setTotal(0);
                        $arMovimientoDetalleAct->setCosto(0);
                        $arMovimientoDetalleAct->setCostoPromedio(0);                        
                        $em->persist($arMovimientoDetalleAct);
                        $em->flush();
                    }                    
                    $arMovimiento->setEstadoAnulado(1);
                    $arMovimiento->setSubTotal(0);
                    $arMovimiento->setTotal(0);
                    $arMovimiento->setTotalNeto(0);
                    $arMovimiento->setValorOtrasRetenciones(0);
                    $arMovimiento->setValorRetencionFuente(0);
                    $arMovimiento->setValorRetencionIvaVentas(0);
                    $arMovimiento->setValorTotalDescuento(0);
                    $arMovimiento->setValorTotalIva(0);
                    $em->persist($arMovimiento);
                    $em->flush();
                    $em->getRepository('zikmontInventarioBundle:InvMovimientos')->Liquidar($codigoMovimiento);
                    return "";
                }
                else
                    return $strValidacion;
            }
            else
                return "No se puede desautorizar el movimiento, verifique que no este anulado y que este autorizado, impresion";
            
        } catch (Exception $e) {
            return $e;
        }
    }    
    
    /**
     * Imprime un movimiento
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @return boolean si se imprime o no el movimiento
     * */
    public function Imprimir($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);
        if($arMovimiento->getEstadoImpreso() == 0) {
            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0) {            
                if($arMovimiento->getNumeroMovimiento() == 0 && $arMovimiento->getDocumentoRel()->getAsignarConsecutivoImpresion() == 1 && $arMovimiento->getEstadoImpreso() == 0) {
                    $arMovimiento->setNumeroMovimiento ($em->getRepository('zikmontInventarioBundle:InvMovimientos')->DevConsecutivo($arMovimiento->getCodigoDocumentoFk()));
                    $arMovimiento->setFecha(date_create(date('Y-m-d H:i:s')));    
                }            
                $arMovimiento->setEstadoImpreso(1);
                $em->persist($arMovimiento);
                $em->flush();

                /*if ($arMovimiento->getDocumentoRel()->getGeneraCartera() == 1)
                    $em->getRepository('zikmontFrontEndBundle:CuentasCobrar')->Aplicar($codigoMovimiento);
                if ($arMovimiento->getDocumentoRel()->getGeneraTesoreria() == 1)
                    $em->getRepository('zikmontFrontEndBundle:CuentasPagar')->Aplicar($codigoMovimiento);
                */
                return "";
            }
            else
                return "El documento debe estar autorizado y no puede estar anulado";            
        }
        else 
            return "";                    
    }

    public function DevMovimientosDocumentosControl($intCodigoDocumento,$intCodigoTerceroPk) {
        $em = $this->getEntityManager();
        $arDocumento = new \zikmont\InventarioBundle\Entity\InvDocumentos();
        $arDocumento = $em->getRepository('zikmontInventarioBundle:InvDocumentos')->find($intCodigoDocumento);
        $strSql = "SELECT inv_movimientos.codigo_movimiento_pk AS codigoMovimientoPk, 
                          inv_movimientos.numero_movimiento AS numeroMovimiento,
                          inv_movimientos.fecha,
                          gen_terceros.nombre_corto_tercero AS nombreCortoTercero,
                          inv_documentos.nombre AS nombre,
                          inv_movimientos.total,
                          inv_documentos_control.codigo_documento_hijo_pk
                   FROM inv_movimientos 
                   RIGHT JOIN inv_documentos_control ON inv_movimientos.codigo_documento_fk = inv_documentos_control.codigo_documento_hijo_pk
                   LEFT JOIN gen_terceros ON inv_movimientos.codigo_tercero_fk = gen_terceros.codigo_tercero_pk
                   LEFT JOIN inv_documentos ON inv_documentos_control.codigo_documento_hijo_pk = inv_documentos.codigo_documento_pk
                   WHERE inv_movimientos.estado_anulado != 1 AND inv_movimientos.estado_autorizado = 1
                         AND inv_documentos_control.codigo_documento_padre_pk = " . $intCodigoDocumento;
        
        if($arDocumento->getExigeTerceroDocumentoControl() == 1)        
            $strSql .= " AND inv_movimientos.codigo_tercero_fk = " . $intCodigoTerceroPk;
        
        $objCon = $em->getConnection();
        $arMovimientos = $objCon->executeQuery($strSql);
        $arMovimientos = $arMovimientos->fetchAll();
        return $arMovimientos;
    }

    /**
     * Liquida los todales del movimiento y los detalles
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function Liquidar($codigoMovimiento) {
        $em = $this->getEntityManager();
        //Encabezados
        $douGranSubTotal = 0;
        $douGranTotalIva = 0;
        $douGranTotalDescuento = 0;
        $douGranTotal = 0;
        $douGranTotalRetencionFuente = 0;
        $douGranTotalRetencionIvaVentas = 0;
        $douGranTotalOtrasRetenciones = 0;


        $arConfiguraciones = new \zikmont\FrontEndBundle\Entity\GenConfiguraciones();
        $arConfiguraciones = $em->getRepository('zikmontFrontEndBundle:GenConfiguraciones')->find(1);
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);
        $arMovimientosDetalle = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
        $arMovimientosDetalle = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
            //Detalles
            $douSubTotal = 0;
            $douTotalIva = 0;
            $douTotalDescuento = 0;
            $douTotal = 0;
            $douSubTotal = $arMovimientoDetalle->getCantidad() * $arMovimientoDetalle->getPrecio();
            $douTotalIva = $douSubTotal * ($arMovimientoDetalle->getPorcentajeIva() / 100);
            if ($arMovimientoDetalle->getPorcentajeDescuento() > 0)
                $douTotalDescuento = $douSubTotal * ($arMovimientoDetalle->getPorcentajeDescuento() / 100);
            $douTotal = $douSubTotal + $douTotalIva - $douTotalDescuento;

            $douGranSubTotal = $douGranSubTotal + $douSubTotal;
            $douGranTotalIva = $douGranTotalIva + $douTotalIva;
            $douGranTotalDescuento = $douGranTotalDescuento + $douTotalDescuento;
            $douGranTotal = $douGranTotal + $douTotal;

            $arMovimientoDetalleAct = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
            $arMovimientoDetalleAct = $em->getRepository('zikmontInventarioBundle:InvMovimientosDetalles')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
            $arMovimientoDetalleAct->setSubTotal($douSubTotal);
            $arMovimientoDetalleAct->setValorTotalIva($douTotalIva);
            $arMovimientoDetalleAct->setTotal($douTotal);
            $em->persist($arMovimientoDetalleAct);
            $em->flush();
        }

        //Calcular la retencion en compras
        if ($arMovimiento->getDocumentoRel()->getCodigoComprobanteFk() == 4) {
            if ($arMovimiento->getTerceroRel()->getAutoretenedor() == 0) {
                if ($douGranSubTotal >= $arConfiguraciones->getBaseRetencionFuente()) {
                    $douGranTotalRetencionFuente = ($douGranSubTotal * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
                }
            }
        }
        
        //Calcular la retencion en la fuente Ventas
        if ($arMovimiento->getDocumentoRel()->getCodigoComprobanteFk() == 3) {
            if ($arMovimiento->getTerceroRel()->getRetencionFuenteVentas() == 1) {
                if ($douGranSubTotal >= $arConfiguraciones->getBaseRetencionFuente() || $arMovimiento->getTerceroRel()->getRetencionFuenteVentasSinBase() == 1) {
                    $douGranTotalRetencionFuente = ($douGranSubTotal * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
                }
            }
            
            //Liquidar retencion de iva para las ventas, solo los grandes contribuyentes y entidades del estado nos retienen 50% iva
            if ($arMovimiento->getTerceroRel()->getClasificacionTributariaRel()->getRetencionIvaVentas() == 1) {
                //Validacion acordada con Luz Dary de que las devoluciones tambien validen la base
                if ($douGranTotalIva >= $arConfiguraciones->getBaseRetencionIvaVentas()) {
                    $douGranTotalRetencionIvaVentas = ($douGranTotalIva * $arConfiguraciones->getPorcentajeRetencionIvaVentas()) / 100;
                }
            }            
        }        

        $douGranTotalOtrasRetenciones = $arMovimiento->getValorOtrasRetenciones();

        $douGranTotal = $douGranTotal - ($douGranTotalRetencionFuente + $douGranTotalOtrasRetenciones + $douGranTotalDescuento);

        //Calcular la retencion en la fuente de ventas para clientes que retengan
        //Si el cliente es retenedor y el documento es una venta (Factura o devolucion)
        if ($arMovimiento->getTerceroRel()->getRetencionFuenteVentas() == 1 && $arMovimiento->getDocumentoRel()->getCodigoComprobanteFk() == 3) {
            if ($douGranSubTotal >= $arConfiguraciones->getBaseRetencionFuente()) {
                $douGranTotalRetencionFuente = ($douGranSubTotal * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
            }
        }

        $arMovimientoAct = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimientoAct = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimiento);
        $arMovimientoAct->setSubTotal($douGranSubTotal);
        $arMovimientoAct->setValorTotalIva($douGranTotalIva);
        $arMovimientoAct->setValorTotalDescuento($douGranTotalDescuento);
        $arMovimientoAct->setTotal($douGranTotal);
        $arMovimientoAct->setValorRetencionFuente($douGranTotalRetencionFuente);
        $arMovimientoAct->setValorRetencionIvaVentas($douGranTotalRetencionIvaVentas);
        $em->persist($arMovimientoAct);
        $em->flush();
    }

    /**
     * Devuelve los movimientos de un filtro
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevMovimientosFiltro($codigoDocumento, $codigoMovimiento, $numeroMovimiento, $codigoTercero, $ChkFecha, $strFechaDesde, $strFechaHasta) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('m')
                ->from('zikmontFrontEndBundle:Movimientos', 'm')
                ->where('m.codigoDocumentoFk = :codigoDocumento')
                ->setParameter('codigoDocumento', $codigoDocumento);

        if ($codigoMovimiento != Null && $codigoMovimiento != "")
            $query->andWhere('m.codigoMovimientoPk = ' . $codigoMovimiento);

        if ($numeroMovimiento != Null && $numeroMovimiento != "")
            $query->andWhere('m.numeroMovimiento = ' . $numeroMovimiento);

        if ($codigoTercero != Null && $codigoTercero != "")
            $query->andWhere('m.codigoTercero = ' . $codigoTercero);

        if ($ChkFecha != Null) {
            if ($strFechaDesde != "" && $strFechaDesde != NULL) {
                if ($strFechaHasta != "" && $strFechaHasta != NULL) {
                    $query->andWhere("m.fecha >= '" . $strFechaDesde . " 00:00:00' AND m.fecha <= '" . $strFechaHasta . " 23:59:59'");
                }
            }
        }

        $objQuery = $query->getQuery();
        $arMovimientos = new \zikmont\InventarioBundle\Entity\InvMovimientosDetalles();
        $arMovimientos = $objQuery->getResult();

        return $arMovimientos;
    }

    /**
     * Devuelve los movimientos facturacion resumido por año y mes     
     * */
    public function DevMovimientosFacturacionResumidoAnnioMes() {
        $em = $this->getEntityManager();
        $strSql = "SELECT DATE_FORMAT(fecha, '%Y') AS FechaAnnio, DATE_FORMAT(fecha, '%M') AS FechaMes, SUM(subtotal) as subTotal 
                   FROM movimientos
                   GROUP BY DATE_FORMAT(fecha, '%Y'), DATE_FORMAT(fecha, '%M')";

        $objCon = $em->getConnection();
        $arMovimientos = $objCon->executeQuery($strSql);
        $arMovimientos = $arMovimientos->fetchAll();
        return $arMovimientos;
    }

    /**
     * Devuelve el estado autorizado de un movimiento
     * @param integer $codigoMovimientoPk El codigo del movimiento a consultar
     * @return boolean 1 / 0 => autorizado / no autorizado 
     */
    public function DevEstadoMovimiento($codigoMovimientoPk) {
        $em = $this->getEntityManager();
        $arMovimiento = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimiento = $em->getRepository('zikmontInventarioBundle:InvMovimientos')->find($codigoMovimientoPk);

        return (int) $arMovimiento->getEstadoAutorizado();
    }

    public function DevMovimientosFacturasPos() {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('m')
                ->from('zikmontFrontEndBundle:Movimientos', 'm')
                ->leftJoin('m.documentoRel', 'doc')
                ->where('doc.facturaPOS = 1 AND m.estadoAnulado = 0 AND m.estadoImpreso = 1 AND m.cierreCaja = 0');
                

        $objQuery = $query->getQuery();
        $arMovimientos = new \zikmont\InventarioBundle\Entity\InvMovimientos();
        $arMovimientos = $objQuery->getResult();
        return $arMovimientos;
    } 
    
    public function DevConsecutivo ($intCodigoDocumento) {
        $em = $this->getEntityManager();
        $arDocumento = new \zikmont\InventarioBundle\Entity\InvDocumentos();
        $arDocumento = $em->getRepository('zikmontInventarioBundle:InvDocumentos')->find($intCodigoDocumento);
        $intNroDocumento = $arDocumento->getConsecutivo();
        $arDocumento->setConsecutivo($intNroDocumento + 1);
        $em->persist($arDocumento);
        $em->flush();
        return $intNroDocumento;
    }

    /**
     * Devuelve un array con el resumen (suma) subtotal de movimientos 
     * @param type $dateFechaDesde
     * @param type $dateFechaHasta
     * @param type $intCodigoDocumento
     * @param type $intCodigoTipoDocumento
     * @return type
     */
    public function DevMovimientosResumenCosto($dateFechaDesde = "", $dateFechaHasta, $intCodigoDocumento = "", $intCodigoTipoDocumento = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(m.valorTotalCosto * doc.operacionComercial)')
                ->from('zikmontInventarioBundle:InvMovimientos', 'm')
                ->leftJoin("m.documentoRel", "doc")                
                ->orderBy("m.fecha", 'ASC');
        
        if ($dateFechaDesde != Null && $dateFechaDesde != "")
            $query->andWhere("m.fecha >= '" . $dateFechaDesde . " 00:00:00'");
        
        if ($dateFechaHasta != Null && $dateFechaHasta != "")
            $query->andWhere("m.fecha <= '" . $dateFechaHasta . " 23:59:59'");
        
        if ($intCodigoDocumento != "")
            $query->andWhere("m.codigoDocumentoFk = " . $intCodigoDocumento);
        
        $objQuery = $query->getQuery();        
        return $objQuery->getResult();        
    }    
    
}